@model RSVPViewModel

<aside>
    <div class="rsvp-cover">
        <div id="will-you-rsvp" style="display: none;">
            <p>
                <span class="salute">Hey</span>
                <br>
                <span class="showNextClass">Join us in our next class </span>
                <br>
                RSVP Here.
                <button id="rsvp-click"  class=".rsvp-ok" asp-action="Index" asp-controller="RSVP">Okay</button>
            </p>
        </div>

        <div id="get-phoneNumber" style="display: none;">
                <fieldset>
                    <legend align="center">RSVP</legend>
                    <p>Please submit your phone number so we can contact you.</p>
                    <form method="Post" id="rsvp-form">
                        <div>
                            <label for="PhoneNumber">Phone number</label>
                            <input asp-for="PhoneNumber" class="text-input" id="text-input-1" type="text" >
                            <span asp-validation-for="PhoneNumber"></span>
                            <button id="submit-no" type="submit" class="btn">Submit</button>
                            <button id="decline-submit" class="btn">Decline</button>
                        </div> 
                    </form> 
                </fieldset>
        </div>


        <div id="rsvp-done" style="display: block;">
                <p>
                    <span>Hey</span>
                    <br>
                    <span class="showNextClass"> We are expecting you in the class</span>
                </p>
        </div>

        <script>

        var willYouRSVP = document.getElementById('will-you-rsvp');
        var getPhoneNumber = document.getElementById('get-phoneNumber');
        var rsvpDone = document.getElementById('rsvp-done');
        var showNextClass = document.getElementsByClassName('showNextClass');
        var nextClass = document.createElement('span');
        var nextClass = document.createElement('span');
        
        var rsvpModel = @Html.Raw(Json.Serialize(Model)); // Get hold of the view model converted to a js object.
            console.log(rsvpModel);

        //var userData = getViewModel();
       // console.log('User data: ' + userData._rsvp);

//sessionStorage.clear();
//localStorage.clear();
 // Save user data
  //setLocalStorage(rsvpModel);// !== 0)
    //{
        //sessionStorage.removeItem('InspIntData');
    //setSession(userData);
    //}
//getUsrData();

function getViewModel(){
   try{
        localStorage = window['localStorage'];
        if(localStorage.length !== 0){
            var viewModel = JSON.parse(localStorage.getItem('InspIntData'));
            console.log('Retrieved from localStorage: ' + viewModel._FN);
            return viewModel;
        }
        else if(sessionStorage.length !== 0){
            var viewModel = JSON.parse(sessionStorage.getItem('InspIntData'));
            console.log('Retrieved from sessionStorage: ' + viewModel._FN);
            return viewModel;
        }
        else{
            
            var request = new XMLHttpRequest();
            request.responseType = 'text';
            request.open('GET', '/Home/GetViewModel?ls=true', true);
            request.send();
            request.onreadystatechange = function()
            {
                if (request.readystate === 4){
                    if(request.status === 200 || request.status === 201)
                    {
                        var viewModel = JSON.parse(request.responseText);
                        console.log(viewModel)
                    }
                }
            }
            

            viewModel = request.responseText;
            console.log(viewModel)
            return viewModel;


            
           // var usrData = @Html.Raw(Json.Serialize(Model)); // Get hold of the view model converted to a js object.
            //console.log(usrData);
            //return usrData;
        }
   }
   catch(error)
   {
       console.error('My own error log: ' + error);
   }
}


// Dynamically append date of next class.       
//appendDateOfNextClass(rsvpModel.dateOfNextClass);

// Display appropriate rsvp view.

//display(rsvpModel);

function appendDateOfNextClass(dateOfNextClass){
    
    // Check if parameter is a valid date data
    if(!dateOfNextClass || new Date(dateOfNextClass).toString() === 'Invalid Date'){
        return 1;
    }
        // Replace the time part so you can effectively compare both dates
        var splitModelDate = dateOfNextClass.split('T')[0];
        var splitLocalDate = new Date().toISOString().split('T')[0];

        var dateOfClass = new Date(splitModelDate + 'T00:00:00Z').toLocaleDateString(undefined, {
            day: 'numeric',
            month: 'short',
            year: 'numeric'
        });
        var today = new Date('2019-09-30' + 'T00:00:00Z').toLocaleDateString (undefined, {
            day: 'numeric',
            month: 'short',
            year: 'numeric'
        });


        if(dateOfClass === today){
                nextClass.innerText = ' today at 1:00pm.'; // replace date with 'today' ....
                showNextClass[0].appendChild(nextClass.cloneNode(true));
                showNextClass[1].appendChild(nextClass);
            return 1;
        } else {
                   nextClass.innerText = ' on ' + dateOfClass + '.';
                   showNextClass[0].appendChild(nextClass.cloneNode(true));
                   showNextClass[1].appendChild(nextClass);
                   return 1;
        }
}


function setLocalStorage(data){
    if(!data){
        
        console.log('Please supply data to set session storage with.')
            return 1;
        }
        console.log('Saving data to local storage......');
    try { 
            var localStorage = window['localStorage'];

            var usrData = {
                _rsvp: data.rsvp,
                _FN: data.firstName,
                _dateOfNextClass: data.dateOfNextClass,
                _hasPN: data.phoneNumber
            };
            localStorage.setItem('InspIntData', JSON.stringify(usrData));
            console.log('Data stored in localStorage.');
            // returns 0 if successful
            return 0
    }
    catch(error) {
            console.error(error);
            //return 1 if not successful
            return 1
    }

}

function setSession(data) {
                // Parameter check.
                if(!data)
                {
                    console.log('Please supply data to set session storage with.');
                    return 1;
                }
            console.log('Setting session storage instead.......');
            try{

            var usrData = {
                _rsvp: data._rsvp,
                _FN: data._FN,
                _dateOfNextClass: data._dateOfNextClass,
                _hasPN: data._hasPN
            };
            sessionStorage.setItem('InspIntData', JSON.stringify(usrData));
            console.log('Data stored in session storage.');
            
            //returns 0 if successful
            return 0;
            }
            catch(error){
                console.error('Error setting session data.....' + error);
            }
}



function display(model){

    if(!model){ console.log('Supply a valid model data.'); return 1;}

    try {
            if(model._rsvp === true){
                console.log(model._rsvp);
                if(model._hasPN === 'false'){ // NOTE: model._hasPN is a string not a bool
                    console.log('Does he have phoneNumber? ' + model._hasPN);
                    rsvpDone.style.display = 'none';
                    getPhoneNumber.style.display = 'block';
                    return 0;
                }
                rsvpDone.style.display = 'none';
                willYouRSVP.style.display = 'block';
                return 0;
            }
            else{
                return 1;
            }
    }
    catch(error){
        console.error(error + model);
        return 1;
    }
}   
    
    
        </script>
    </div>
</aside>




